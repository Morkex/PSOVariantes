;---------------------------------- PSO Library ------------------------------------------
;--------------------------- Global and Agents Definition --------------------------------

globals [
  global-best-pos
  global-best-value
  families
  MejoresValoresPorFamilia
  MejoresPosicionesPorFamilia
  radio
  radioNoAcum
]

breed [AI:particles AI:particle]
breed [Banderas Bandera]
AI:particles-own [
  velocity
  pos
  mejorValorEnRadio
  mejorPosEnRadio
  personal-best-value
  personal-best-pos
  evaluation
  family
]
Banderas-own[
  pos
  cont
]

;------------------------------------------------------------------------------------------
;------------------------- Customizable Procedures ----------------------------------------

; AI:evaluation reports the evaluation of the current particle. Must be individualize to
; fit the necesities of the problem

;to-report AI:evaluation

; AI:PSOExternalUpdate contains the set of auxiliary actions to be performed in every
; iteration of the main loop

;to AI:PSOExternalUpdate

;------------------------------------------------------------------------------------------
; Creation of the AI:particles:
;    population: number of particles to be created
;    dimesion: dimension of the space search
;
; Position of the particles will be in [0,1]^n
; Initial Velocities follow a Normal Distribution

to AI:Create-particles [#population #dimension]
  create-AI:particles #population [
    set pos n-values #dimension [random-float 1]
    ; Give initial velocities with a normal distribution
    set velocity n-values #dimension  [(random-normal 0 1)]
    set evaluation AI:evaluation
    ; The starting position is the initial best personal value
    
    set personal-best-value evaluation
    set personal-best-pos pos
  ]
  let best min-one-of (AI:particles with-max [evaluation]) [who]
  set global-best-value [personal-best-value] of best
  set global-best-pos [personal-best-pos] of best
end

to AI:Create-particlesFam [#population #dimension #families]
  ;En caso de que el número de familias sea mayor que el de población, establecemos la primera como 
  set MejoresValoresPorFamilia    []
  set MejoresPosicionesPorFamilia []
  set families []
  create-AI:particles #population [
    
    set pos n-values #dimension [random-float 1]
    ; Give initial velocities with a normal distribution
    set velocity n-values #dimension  [(random-normal 0 1)]
    set family random (#families)
    set families lput family families 
    set evaluation AI:evaluation
    ; The starting position is the initial best personal value
    set personal-best-value evaluation
    set personal-best-pos pos
  ]
  
  set families remove-duplicates families
  foreach families[t -> 
    let best min-one-of (AI:particles with[family = t] with-max [evaluation]) [who]
    set MejoresValoresPorFamilia    lput ([personal-best-value] of best)  MejoresValoresPorFamilia
    set MejoresPosicionesPorFamilia lput ([personal-best-pos]   of best)  MejoresPosicionesPorFamilia
  ]
  foreach n-values length families [i -> i] [indice ->
    let value item indice MejoresValoresPorFamilia
    if(value = max MejoresValoresPorFamilia)
    [
      set global-best-value value
      set global-best-pos item indice MejoresPosicionesPorFamilia
    ]
  ] 
end

to AI:Create-particlesGeo [#population #dimension #radio]
  set radio #radio
  create-AI:particles #population [
    set pos n-values #dimension [random-float 1]
    ; Give initial velocities with a normal distribution
    set velocity n-values #dimension  [(random-normal 0 1)]
    set evaluation AI:evaluation
    ; The starting position is the initial best personal value
    
    set personal-best-value evaluation
    set personal-best-pos pos
  ]
  let best min-one-of (AI:particles with-max [evaluation]) [who]
  set global-best-value [personal-best-value] of best
  set global-best-pos [personal-best-pos] of best
  ask AI:particles[
    
    set mejorValorEnRadio global-best-value
    set mejorPosEnRadio global-best-pos
  ]
end

to AI:Create-particlesNoAcum [#population #dimension #radio]
  let posiciones[]
  set #radio radioNoAcumulativo
  create-AI:particles #population [
    set pos n-values #dimension [random-float 1]
    ; Give initial velocities with a normal distribution
    set posiciones lput pos posiciones
    set velocity n-values #dimension  [(random-normal 0 1)]
    set evaluation AI:evaluation
    ; The starting position is the initial best personal value
    set personal-best-value evaluation
    set personal-best-pos pos
  ] 
  foreach posiciones[par -> 
    create-Banderas 1 [
      let x first par
      let y last  par
      set pos (list x y)
      set cont 10
    ]
  ]
  ask Banderas[
    setxy (convert (first pos) min-pxcor max-pxcor) (convert (last pos) min-pycor max-pycor)
    set size 3  
  ]
  set-default-shape Banderas "x"
  ;let x convert (first par) min-pxcor max-pxcor
  ;let y convert (last  par) min-pxcor max-pxcor
  
  let best min-one-of (AI:particles with-max [evaluation]) [who]
  set global-best-value [personal-best-value] of best
  set global-best-pos [personal-best-pos] of best
  
end

; Main Procedure report. It gives iter repetitions of step function, and returns the 
; position and value of the (possibly local) maximum found.

to-report AI:PSO [#iters #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
  repeat #iters [
    AI:PSO-step #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles
    AI:PSOExternalUpdate
  ]
  report (list global-best-value global-best-pos)
end

to-report AI:PSOFam [#iters #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
  repeat #iters [
    AI:PSO-step-Family #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles
    AI:PSOExternalUpdate
  ]
  report (list global-best-value global-best-pos)
end

to-report AI:PSOGeo [#iters #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
  repeat #iters [
    AI:PSO-step-Geometrico #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles
    AI:PSOExternalUpdate
  ]
  report (list global-best-value global-best-pos)
end

to-report AI:PSONoAcum [#iters #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
  repeat #iters [
    AI:PSO-stepNoAcum #inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles
    AI:PSOExternalUpdate
  ]
  report (list global-best-value global-best-pos)
end

; Step procedure where the PSO algorithm is executing

to AI:PSO-stepNoAcum [#inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
  ; First, check if the best values mus be updated (personals and global)
  ask Banderas[
    let num count  AI:particles in-radius radioNoAcum
    set cont cont - num
  ]
  let BanderaCont (map[z -> (list z [cont] of z)] sort (Banderas))
  foreach BanderaCont[pc ->
    if(last pc <= 0)
    [
      ask first pc [
        set cont 5
        ask AI:particles in-radius 1[
          let p pos
          let #d length p   
          set pos n-values #d [random-float 1]  
          set velocity n-values #d  [(random-normal 0 1)]
          set evaluation AI:evaluation
        ]
      ]
    ]
  ]
   ask AI:particles [
    if evaluation > personal-best-value
    [
      set personal-best-value evaluation
      set personal-best-pos pos
    ]
    if global-best-value < personal-best-value
    [
      set global-best-value personal-best-value
      set global-best-pos personal-best-pos
    ]
  ]
  let parejas (map[[z  x] -> (list ([personal-best-pos] of z) x) ] sort (AI:particles) sort(Banderas))
  foreach parejas [par ->
    ask last par[
      set pos first par
      setxy (convert (first pos) min-pxcor max-pxcor) (convert (last pos) min-pycor max-pycor)
    ]
  ]
  
  let best min-one-of (AI:particles with-max [personal-best-value]) [who]
  set global-best-value [personal-best-value] of best
  set global-best-pos [personal-best-pos] of best
  
  ; Then, update velocities and positions of every particle
  ask AI:particles
  [
    ; Consider the inertia
    set velocity *v #inertia-particle velocity
    
    ; Attraction to personal best
    let to-personal-best-pos -v personal-best-pos pos
    set velocity +v velocity (*v ((1 - #inertia-particle) * #atraction-best-personal * (random-float 1.0)) to-personal-best-pos)
    
    ; Attraction to global best
    let to-global-best -v global-best-pos pos
    set velocity  +v velocity (*v ((1 - #inertia-particle) * #atraction-best-global * (random-float 1.0)) to-global-best)
    
    ; Bound the velocity
    let n norm velocity
    if n > #lim-vel-particles [set velocity (*v ( #lim-vel-particles / n) velocity)]
    
    ; Update the position of the particle
    set pos map cut01 (+v pos velocity)
    set evaluation AI:evaluation
  ]
  ; Restart particles that close too much
  ask AI:particles [
    let p pos
    let #d length p
    ask other AI:particles with [norm (-v  p pos) < .01] [
      set pos n-values #d [random-float 1]
      set velocity n-values #d  [(random-normal 0 1)]
      set evaluation AI:evaluation
    ]
  ]
end

to AI:PSO-step-Family [#inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
  ; First, check if the best values mus be updated (personals and global)
  set MejoresValoresPorFamilia    []
  set MejoresPosicionesPorFamilia []
  ask AI:particles [
    if evaluation > personal-best-value
    [
      set personal-best-value evaluation
      set personal-best-pos pos
    ]
    if global-best-value < personal-best-value
    [
      set global-best-value personal-best-value
      set global-best-pos personal-best-pos
    ]
  ]
  
  foreach families[t -> 
    let best min-one-of (AI:particles with[family = t] with-max [personal-best-value]) [who]
    set MejoresValoresPorFamilia    lput ([personal-best-value] of best)  MejoresValoresPorFamilia
    set MejoresPosicionesPorFamilia lput ([personal-best-pos]   of best)  MejoresPosicionesPorFamilia
  ]
  let listaIndices n-values length families [i -> i]
  ; Then, update velocities and positions of every particle
  foreach listaIndices [ indice -> 
    let mejorPosicionFamilia item indice MejoresPosicionesPorFamilia
    ask AI:particles with[family = item indice families] 
    [
      ; Consider the inertia
      set velocity *v #inertia-particle velocity
      
      ; Attraction to personal best
      let to-personal-best-pos -v personal-best-pos pos
      set velocity +v velocity (*v ((1 - #inertia-particle) * #atraction-best-personal * (random-float 1.0)) to-personal-best-pos)
      
      ; Attraction to global best
      
      let to-mejorPosicionFamilia -v mejorPosicionFamilia pos
      set velocity  +v velocity (*v ((1 - #inertia-particle) * #atraction-best-global * (random-float 1.0)) to-mejorPosicionFamilia)
      
      ; Bound the velocity
      let n norm velocity
      if n > #lim-vel-particles [set velocity (*v ( #lim-vel-particles / n) velocity)]
      
      ; Update the position of the particle
      set pos map cut01 (+v pos velocity)
      set evaluation AI:evaluation
  ]]
  ; Restart particles that close too much
  ask AI:particles [
    let p pos
    let #d length p
    ask other AI:particles with [norm (-v  p pos) < .01 and family = [family] of self] [
      set pos n-values #d [random-float 1]
      set velocity n-values #d  [(random-normal 0 1)]
      set evaluation AI:evaluation
    ]
  ]
end

to AI:PSO-step-Geometrico [#inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
  ; First, check if the best values mus be updated (personals and global)
  ask AI:particles [
    if evaluation > personal-best-value
    [
      set personal-best-value evaluation
      set personal-best-pos pos
    ]
  ]
  let best min-one-of (AI:particles with-max [personal-best-value]) [who]
  set global-best-value [personal-best-value] of best
  set global-best-pos [personal-best-pos] of best
  ; Then, update velocities and positions of every particle
  ask AI:particles
  [
    let mejorEnRadioItA min-one-of (AI:particles in-radius radio with-max[personal-best-value]) [who]
    let mejorEnRadioValorItA [personal-best-value] of mejorEnRadioItA
    let mejorEnRadioPosItA   [personal-best-pos] of mejorEnRadioItA
    if(mejorEnRadioValorItA > mejorValorEnRadio)
    [
      set mejorValorEnRadio mejorEnRadioValorItA
      set mejorPosEnRadio mejorEnRadioPosItA
    ]
    
    set velocity *v #inertia-particle velocity
    
    ; Attraction to personal best
    let to-personal-best-pos -v personal-best-pos pos
    set velocity +v velocity (*v ((1 - #inertia-particle) * #atraction-best-personal * (random-float 1.0)) to-personal-best-pos)
    
    ; Attraction to global best
    let to-global-best -v mejorPosEnRadio pos
    set velocity  +v velocity (*v ((1 - #inertia-particle) * #atraction-best-global * (random-float 1.0)) to-global-best)
    
    ; Bound the velocity
    let n norm velocity
    if n > #lim-vel-particles [set velocity (*v ( #lim-vel-particles / n) velocity)]
    
    ; Update the position of the particle
    set pos map cut01 (+v pos velocity)
    set evaluation AI:evaluation
  ]
  ; Restart particles that close too much
  ask AI:particles [
    let p pos
    let #d length p
    ask other AI:particles with [norm (-v  p pos) < .01] [
      set pos n-values #d [random-float 1]
      set velocity n-values #d  [(random-normal 0 1)]
      set evaluation AI:evaluation
    ]
  ]
end

to AI:PSO-step [#inertia-particle #atraction-best-personal #atraction-best-global #lim-vel-particles]
 ; First, check if the best values mus be updated (personals and global)
  ask AI:particles [
    if evaluation > personal-best-value
    [
      set personal-best-value evaluation
      set personal-best-pos pos
    ]
;    if global-best-value < personal-best-value
;    [
;      set global-best-value personal-best-value
;      set global-best-pos personal-best-pos
;    ]
  ]
  let best min-one-of (AI:particles with-max [personal-best-value]) [who]
  set global-best-value [personal-best-value] of best
  set global-best-pos [personal-best-pos] of best

  ; Then, update velocities and positions of every particle
  ask AI:particles
  [
    ; Consider the inertia
    set velocity *v #inertia-particle velocity
    
    ; Attraction to personal best
    let to-personal-best-pos -v personal-best-pos pos
    set velocity +v velocity (*v ((1 - #inertia-particle) * #atraction-best-personal * (random-float 1.0)) to-personal-best-pos)
    
    ; Attraction to global best
    let to-global-best -v global-best-pos pos
    set velocity  +v velocity (*v ((1 - #inertia-particle) * #atraction-best-global * (random-float 1.0)) to-global-best)

    ; Bound the velocity
    let n norm velocity
    if n > #lim-vel-particles [set velocity (*v ( #lim-vel-particles / n) velocity)]
    
    ; Update the position of the particle
    set pos map cut01 (+v pos velocity)
    set evaluation AI:evaluation
  ]
  ; Restart particles that close too much
  ask AI:particles [
    let p pos
    let #d length p
    ask other AI:particles with [norm (-v  p pos) < .01] [
      set pos n-values #d [random-float 1]
      set velocity n-values #d  [(random-normal 0 1)]
      set evaluation AI:evaluation
    ]
  ]
end

to DinamicGlobalSearch
  if(repeticiones >= 2)[
    ask AI:particles[
      let valorPos 0
      ask patch (convert (first personal-best-pos ) min-pxcor max-pxcor) (convert (last personal-best-pos) min-pycor max-pycor)
      [
        set valorPos [val] of self
      ]
      if(valorPos != personal-best-value)
      [
        set personal-best-value  0
      ]
    ]
    let globalPos 0
    ask patch (convert (first global-best-pos ) min-pxcor max-pxcor) (convert (last global-best-pos) min-pycor max-pycor)[
      set globalPos [val] of self
    ]
    if(globalPos != global-best-value)
    [
      set global-best-value 0
    ]
  ]
end

; ----------------------- Auxiliary reports and procedures ------------------------

; Returns a random point in a interval [a b]
to-report random-in-interval [I]
  let a first I
  let b last I
  report a + random-float (b - a)
end

; Product of an scalar and a vector
to-report *v [lambda v1]
  report map [x -> lambda * x] v1
end

; Sum of vectors
to-report +v [v1 v2]
  report (map [[x1 x2] -> x1 + x2] v1 v2)
end

; Difference of vectors
to-report -v [v1 v2]
  report (map [[x1 x2] -> x1 - x2] v1 v2)
end

; Sign function
to-report sg [x]
  report ifelse-value (x >= 0) [1][-1]
end

; Norm of a vector
to-report norm [v1]
  report sqrt sum map [x -> x * x] v1
end

; Bijection from [0,1] to [a,b]
to-report convert [x a b]
  report a + x * (b - a)
end

; Bound function to [0,1]
to-report cut01 [x]
  if x > 1 [report 1]
  if x < 0 [report 0]
  report x
end
